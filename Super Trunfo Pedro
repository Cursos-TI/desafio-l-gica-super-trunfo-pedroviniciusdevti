#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

struct Carta {
    char estado[3];
    char codigo[5];
    char nome[50];
    int populacao;
    float area;
    float pib;
    int pontos_turisticos;
};

const char *estados[] = {"SP", "RJ", "MG", "BA", "RS", "SC", "PR", "PE", "CE", "GO"};
const char *cidades[] = {"São Paulo", "Rio de Janeiro", "Belo Horizonte", "Salvador", "Porto Alegre", "Florianópolis", "Curitiba", "Recife", "Fortaleza", "Goiânia"};

int randInt(int min, int max) {
    return min + rand() % (max - min + 1);
}

float randFloat(float min, float max) {
    return min + ((float)rand() / RAND_MAX) * (max - min);
}

void gerarCarta(struct Carta *c, int indice) {
    strcpy(c->estado, estados[randInt(0, 9)]);
    sprintf(c->codigo, "C%02d", indice);
    strcpy(c->nome, cidades[randInt(0, 9)]);
    c->populacao = randInt(10000, 10000000);
    c->area = randFloat(100.0, 10000.0);
    c->pib = randFloat(1.0, 500.0);
    c->pontos_turisticos = randInt(1, 50);
}

void exibirCarta(struct Carta c) {
    printf("\nEstado: %s", c.estado);
    printf("\nCódigo: %s", c.codigo);
    printf("\nCidade: %s", c.nome);
    printf("\nPopulação: %d", c.populacao);
    printf("\nÁrea: %.2f km²", c.area);
    printf("\nPIB: %.2f bilhões", c.pib);
    printf("\nPontos Turísticos: %d\n", c.pontos_turisticos);
}

void compararCartas(struct Carta c1, struct Carta c2, int opcao) {
    switch (opcao) {
        case 1:
            if (c1.populacao > c2.populacao)
                printf("%s venceu pela População!\n", c1.nome);
            else if (c2.populacao > c1.populacao)
                printf("%s venceu pela População!\n", c2.nome);
            else
                printf("Empate na População!\n");
            break;
        case 2:
            if (c1.area > c2.area)
                printf("%s venceu pela Área!\n", c1.nome);
            else if (c2.area > c1.area)
                printf("%s venceu pela Área!\n", c2.nome);
            else
                printf("Empate na Área!\n");
            break;
        case 3:
            if (c1.pib > c2.pib)
                printf("%s venceu pelo PIB!\n", c1.nome);
            else if (c2.pib > c1.pib)
                printf("%s venceu pelo PIB!\n", c2.nome);
            else
                printf("Empate no PIB!\n");
            break;
        case 4:
            if (c1.pontos_turisticos > c2.pontos_turisticos)
                printf("%s venceu pelos Pontos Turísticos!\n", c1.nome);
            else if (c2.pontos_turisticos > c1.pontos_turisticos)
                printf("%s venceu pelos Pontos Turísticos!\n", c2.nome);
            else
                printf("Empate nos Pontos Turísticos!\n");
            break;
        case 5: {
            float dens1 = c1.populacao / c1.area;
            float dens2 = c2.populacao / c2.area;
            if (dens1 < dens2)
                printf("%s venceu pela Densidade Populacional!\n", c1.nome);
            else if (dens2 < dens1)
                printf("%s venceu pela Densidade Populacional!\n", c2.nome);
            else
                printf("Empate na Densidade Populacional!\n");
            break;
        }
        default:
            printf("Opção inválida!\n");
    }
}

int main() {
    srand(time(NULL));
    struct Carta carta1, carta2;

    gerarCarta(&carta1, 1);
    gerarCarta(&carta2, 2);

    printf("\n=== Cartas Geradas Aleatoriamente ===\n");
    printf("\nCarta 1:");
    exibirCarta(carta1);
    printf("\nCarta 2:");
    exibirCarta(carta2);

    int opcao = randInt(1, 5);
    printf("\nAtributo escolhido aleatoriamente: %d\n", opcao);

    printf("\nResultado da Comparação:\n");
    compararCartas(carta1, carta2, opcao);

    return 0;
}
